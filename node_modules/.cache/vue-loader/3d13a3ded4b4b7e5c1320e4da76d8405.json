{"remainingRequest":"/home/slassinger/vue-website/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/slassinger/vue-website/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/slassinger/vue-website/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/slassinger/vue-website/src/views/Home.vue?vue&type=template&id=fae5bece&scoped=true&","dependencies":[{"path":"/home/slassinger/vue-website/src/views/Home.vue","mtime":1612326008850},{"path":"/home/slassinger/vue-website/node_modules/cache-loader/dist/cjs.js","mtime":1605744263170},{"path":"/home/slassinger/vue-website/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1605744280993},{"path":"/home/slassinger/vue-website/node_modules/cache-loader/dist/cjs.js","mtime":1605744263170},{"path":"/home/slassinger/vue-website/node_modules/vue-loader/lib/index.js","mtime":1605744280991}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}